type token =
  | Comma
  | Dot
  | Semicolumn
  | LeftParen
  | RightParen
  | LBrace
  | RBrace
  | True
  | False
  | ForAll
  | Exists
  | And
  | NegAnd
  | Or
  | NegOr
  | Equality
  | NegEquality
  | Negation
  | ImplicationLR
  | ImplicationRL
  | Equivalence
  | NegEquivalence
  | Plus
  | Minus
  | CNF of (string)
  | FOF of (string)
  | Include of (string)
  | Axiom of (string)
  | Hypothesis of (string)
  | Conjecture of (string)
  | Negated_conjecture of (string)
  | Lemma of (string)
  | Theorem of (string)
  | Plain of (string)
  | Unknown of (string)
  | Derived of (string)
  | Equal of (string)
  | Inference of (string)
  | Theory of (string)
  | AC of (string)
  | File of (string)
  | Creator of (string)
  | Description of (string)
  | Iquote of (string)
  | Status of (string)
  | Thm of (string)
  | Sat of (string)
  | Refutation of (string)
  | PositiveInteger of (string)
  | FormulaItem of (string)
  | InferenceItem of (string)
  | GeneralFunction of (string)
  | InferenceInfo of (string)
  | DagSource of (string)
  | ExternalSource of (string)
  | UpperWord of (string)
  | LowerWord of (string)
  | DollarWord of (string)
  | DollarDollarWord of (string)
  | String of (string)
  | QuotedStr of (string)
  | CommentPercent of (string)
  | CommentEprover of (string)
  | CommentStar of (string)
  | AnnotationPercent of (string)
  | AnnotationStar of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "src/parser_tptp.mly"
 open Parser_types

 let foo = "foo" 
 let disquote_string  str = 
      String.sub str 1 ((String.length str)-2)
 let parse_error s = raise Parser_types.Parsing_fails
# 80 "src/parser_tptp.ml"
let yytransl_const = [|
  257 (* Comma *);
  258 (* Dot *);
  259 (* Semicolumn *);
  260 (* LeftParen *);
  261 (* RightParen *);
  262 (* LBrace *);
  263 (* RBrace *);
  264 (* True *);
  265 (* False *);
  266 (* ForAll *);
  267 (* Exists *);
  268 (* And *);
  269 (* NegAnd *);
  270 (* Or *);
  271 (* NegOr *);
  272 (* Equality *);
  273 (* NegEquality *);
  274 (* Negation *);
  275 (* ImplicationLR *);
  276 (* ImplicationRL *);
  277 (* Equivalence *);
  278 (* NegEquivalence *);
  279 (* Plus *);
  280 (* Minus *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  281 (* CNF *);
  282 (* FOF *);
  283 (* Include *);
  284 (* Axiom *);
  285 (* Hypothesis *);
  286 (* Conjecture *);
  287 (* Negated_conjecture *);
  288 (* Lemma *);
  289 (* Theorem *);
  290 (* Plain *);
  291 (* Unknown *);
  292 (* Derived *);
  293 (* Equal *);
  294 (* Inference *);
  295 (* Theory *);
  296 (* AC *);
  297 (* File *);
  298 (* Creator *);
  299 (* Description *);
  300 (* Iquote *);
  301 (* Status *);
  302 (* Thm *);
  303 (* Sat *);
  304 (* Refutation *);
  305 (* PositiveInteger *);
  306 (* FormulaItem *);
  307 (* InferenceItem *);
  308 (* GeneralFunction *);
  309 (* InferenceInfo *);
  310 (* DagSource *);
  311 (* ExternalSource *);
  312 (* UpperWord *);
  313 (* LowerWord *);
  314 (* DollarWord *);
  315 (* DollarDollarWord *);
  316 (* String *);
  317 (* QuotedStr *);
  318 (* CommentPercent *);
  319 (* CommentEprover *);
  320 (* CommentStar *);
  321 (* AnnotationPercent *);
  322 (* AnnotationStar *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\003\000\003\000\
\011\000\011\000\007\000\007\000\009\000\009\000\009\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\015\000\
\010\000\010\000\016\000\016\000\018\000\018\000\018\000\021\000\
\020\000\023\000\023\000\024\000\024\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\019\000\026\000\022\000\
\027\000\027\000\027\000\030\000\030\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\029\000\029\000\
\032\000\033\000\034\000\034\000\034\000\034\000\038\000\025\000\
\031\000\031\000\040\000\008\000\008\000\041\000\039\000\035\000\
\035\000\036\000\037\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\004\000\004\000\044\000\044\000\043\000\005\000\005\000\
\005\000\006\000\006\000\012\000\012\000\012\000\045\000\045\000\
\047\000\048\000\049\000\049\000\050\000\050\000\051\000\052\000\
\053\000\053\000\046\000\046\000\046\000\054\000\056\000\055\000\
\057\000\013\000\013\000\058\000\058\000\059\000\059\000\059\000\
\060\000\060\000\063\000\064\000\061\000\061\000\065\000\065\000\
\067\000\068\000\066\000\070\000\070\000\069\000\069\000\062\000\
\062\000\071\000\071\000\072\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\009\000\010\000\
\002\000\004\000\001\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\006\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\006\000\
\001\000\001\000\001\000\003\000\003\000\002\000\001\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\005\000\006\000\001\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\004\000\004\000\001\000\001\000\001\000\
\010\000\001\000\001\000\003\000\001\000\002\000\002\000\004\000\
\001\000\001\000\001\000\001\000\001\000\006\000\001\000\006\000\
\001\000\002\000\003\000\001\000\003\000\004\000\004\000\004\000\
\001\000\001\000\004\000\004\000\001\000\001\000\004\000\004\000\
\001\000\006\000\004\000\001\000\001\000\002\000\003\000\001\000\
\004\000\001\000\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\011\000\012\000\000\000\119\000\121\000\120\000\
\122\000\123\000\002\000\173\000\000\000\003\000\004\000\005\000\
\006\000\000\000\000\000\001\000\000\000\079\000\118\000\000\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\078\000\108\000\109\000\110\000\111\000\112\000\113\000\080\000\
\082\000\083\000\000\000\076\000\067\000\068\000\069\000\070\000\
\071\000\077\000\081\000\000\000\000\000\000\000\000\000\114\000\
\117\000\000\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\000\000\000\000\015\000\115\000\000\000\
\000\000\000\000\057\000\058\000\035\000\034\000\000\000\047\000\
\000\000\000\000\072\000\000\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\000\000\051\000\000\000\000\000\049\000\
\050\000\059\000\063\000\000\000\066\000\013\000\000\000\000\000\
\062\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\075\000\
\126\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\000\000\064\000\000\000\
\000\000\127\000\000\000\128\000\000\000\000\000\000\000\000\000\
\141\000\139\000\140\000\000\000\010\000\000\000\037\000\053\000\
\056\000\000\000\124\000\000\000\000\000\000\000\125\000\146\000\
\000\000\000\000\000\000\000\000\000\000\033\000\130\000\000\000\
\137\000\138\000\000\000\000\000\145\000\000\000\000\000\000\000\
\000\000\147\000\000\000\000\000\136\000\000\000\000\000\000\000\
\000\000\000\000\153\000\154\000\000\000\000\000\000\000\000\000\
\157\000\158\000\172\000\168\000\065\000\000\000\000\000\000\000\
\149\000\000\000\143\000\000\000\000\000\000\000\000\000\150\000\
\000\000\000\000\000\000\151\000\152\000\000\000\000\000\142\000\
\144\000\000\000\000\000\161\000\000\000\000\000\000\000\000\000\
\000\000\164\000\165\000\000\000\000\000\000\000\155\000\156\000\
\159\000\163\000\000\000\160\000\166\000\000\000\171\000\169\000\
\000\000\000\000\000\000\000\000\167\000\000\000\134\000\000\000\
\000\000\000\000\135\000\129\000\132\000\000\000\162\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\235\000\
\084\000\100\000\134\000\025\001\189\000\085\000\086\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\159\000\
\109\000\110\000\111\000\112\000\113\000\166\000\114\000\115\000\
\116\000\117\000\061\000\062\000\063\000\064\000\065\000\123\000\
\066\000\067\000\024\000\070\000\179\000\184\000\180\000\208\000\
\026\001\027\001\031\001\185\000\211\000\186\000\187\000\244\000\
\214\000\204\000\205\000\226\000\232\000\010\001\227\000\228\000\
\233\000\234\000\005\001\008\001\011\001\012\001\013\001\240\000"

let yysindex = "\008\000\
\001\000\000\000\000\000\000\000\010\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\018\255\255\254\000\000\035\001\000\000\000\000\094\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\255\035\001\082\255\077\000\000\000\
\000\000\156\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\162\255\150\255\000\000\000\000\068\255\
\153\255\068\255\000\000\000\000\000\000\000\000\190\255\000\000\
\254\000\204\255\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\207\255\000\000\068\255\057\255\000\000\
\000\000\000\000\000\000\216\255\000\000\000\000\231\001\254\000\
\000\000\177\255\000\000\247\254\219\255\068\255\068\255\068\255\
\068\255\068\255\068\255\068\255\068\255\225\255\179\255\000\000\
\254\000\254\000\254\000\254\000\254\000\000\000\011\255\000\000\
\000\000\233\255\234\255\241\255\000\000\122\255\226\255\134\255\
\180\255\210\255\210\255\118\255\004\255\242\255\236\255\245\255\
\157\255\157\255\157\255\157\255\014\255\235\255\254\000\072\001\
\146\255\243\255\000\000\248\255\179\255\254\000\000\000\167\255\
\244\255\000\000\253\255\000\000\005\000\006\000\009\000\007\000\
\000\000\000\000\000\000\013\255\000\000\068\255\000\000\000\000\
\000\000\035\001\000\000\248\254\255\254\255\254\000\000\000\000\
\010\000\011\000\012\000\013\000\016\000\000\000\000\000\018\000\
\000\000\000\000\019\000\020\000\000\000\022\000\154\255\022\255\
\035\001\000\000\092\255\243\255\000\000\035\001\243\255\021\000\
\031\000\036\000\000\000\000\000\041\000\042\000\051\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\058\000\
\000\000\055\000\000\000\098\000\109\000\255\254\255\254\000\000\
\035\001\002\000\035\001\000\000\000\000\200\000\110\000\000\000\
\000\000\112\000\113\000\000\000\153\000\154\000\111\000\155\000\
\150\000\000\000\000\000\200\000\160\000\247\254\000\000\000\000\
\000\000\000\000\109\001\000\000\000\000\159\000\000\000\000\000\
\143\000\165\000\172\000\173\000\000\000\255\254\000\000\205\000\
\247\254\206\000\000\000\000\000\000\000\208\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\209\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\195\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\149\000\000\000\
\000\000\000\000\000\000\240\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\211\000\000\000\220\001\208\001\020\255\
\255\000\181\255\211\001\084\255\028\255\000\000\000\000\210\000\
\164\001\186\001\140\255\017\000\213\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\212\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\168\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\255\000\000\216\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\209\001\000\000\000\000\000\000\000\000\000\000\000\000\239\255\
\000\000\038\000\000\000\097\001\124\255\000\000\135\001\148\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\091\001\
\126\255\000\000\172\255\000\000\000\000\092\001\000\000\049\255\
\050\255\238\255\000\000\000\000\000\000\000\000\237\255\000\000\
\000\000\000\000\068\001\198\001\000\000\000\000\000\000\017\001\
\238\000\000\000\000\000\000\000\000\000\022\001\000\000\000\000\
\000\000\000\000\054\001\000\000\000\000\130\001\000\000\000\000\
\000\000\000\000\000\000\000\000\024\001\000\000\127\255\000\000"

let yytablesize = 765
let yytable = "\023\000\
\011\000\136\000\060\000\059\000\160\000\060\000\069\000\209\000\
\001\000\236\000\237\000\167\000\121\000\019\000\174\000\126\000\
\127\000\128\000\129\000\200\000\040\000\021\000\130\000\131\000\
\040\000\145\000\137\000\138\000\045\000\137\000\138\000\210\000\
\045\000\139\000\140\000\143\000\139\000\140\000\040\000\040\000\
\040\000\040\000\160\000\133\000\146\000\147\000\236\000\237\000\
\045\000\133\000\060\000\069\000\161\000\162\000\163\000\164\000\
\165\000\236\000\237\000\022\000\236\000\237\000\201\000\202\000\
\203\000\071\000\229\000\028\001\237\000\230\000\072\000\090\000\
\137\000\138\000\231\000\091\000\092\000\093\000\094\000\139\000\
\140\000\206\000\176\000\095\000\044\000\096\000\074\000\242\000\
\044\000\165\000\245\000\097\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000\048\000\098\000\050\000\051\000\052\000\
\053\000\054\000\055\000\099\000\056\000\057\000\058\000\119\000\
\022\000\126\000\127\000\128\000\129\000\126\000\127\000\022\001\
\130\000\131\000\023\001\133\000\060\000\201\000\202\000\203\000\
\060\000\126\000\127\000\128\000\129\000\060\000\178\000\060\000\
\060\000\060\000\060\000\060\000\060\000\087\000\060\000\060\000\
\060\000\060\000\088\000\150\000\151\000\152\000\153\000\154\000\
\155\000\156\000\157\000\193\000\170\000\089\000\170\000\060\000\
\207\000\023\000\213\000\139\000\140\000\042\000\137\000\138\000\
\181\000\042\000\182\000\183\000\083\000\139\000\140\000\126\000\
\127\000\120\000\129\000\073\000\224\000\225\000\238\000\073\000\
\042\000\042\000\042\000\060\000\243\000\122\000\073\000\073\000\
\073\000\073\000\073\000\073\000\135\000\073\000\073\000\073\000\
\073\000\073\000\073\000\141\000\149\000\126\000\127\000\128\000\
\129\000\144\000\002\001\003\001\130\000\158\000\060\000\004\001\
\060\000\207\000\099\000\238\000\168\000\169\000\127\000\175\000\
\065\000\170\000\172\000\171\000\065\000\173\000\238\000\194\000\
\188\000\238\000\190\000\065\000\065\000\065\000\065\000\065\000\
\065\000\195\000\065\000\065\000\065\000\065\000\065\000\065\000\
\196\000\197\000\035\001\199\000\198\000\215\000\216\000\217\000\
\219\000\061\000\220\000\218\000\222\000\061\000\223\000\221\000\
\246\000\003\000\004\000\005\000\061\000\061\000\061\000\061\000\
\061\000\061\000\247\000\061\000\061\000\061\000\061\000\124\000\
\248\000\252\000\182\000\125\000\249\000\250\000\076\000\066\000\
\066\000\066\000\126\000\127\000\128\000\129\000\251\000\255\000\
\253\000\130\000\131\000\132\000\133\000\254\000\006\000\007\000\
\008\000\009\000\010\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\068\000\066\000\066\000\066\000\000\001\066\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\001\001\019\001\014\001\015\001\016\001\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\048\000\056\000\057\000\
\058\000\048\000\022\000\009\001\021\001\017\001\018\001\020\001\
\048\000\048\000\048\000\048\000\024\001\029\001\030\001\048\000\
\048\000\048\000\048\000\032\001\033\001\034\001\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\009\001\056\000\057\000\
\058\000\036\001\022\000\009\001\039\001\116\000\014\000\009\000\
\036\000\052\000\148\000\097\000\148\000\020\000\131\000\118\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\041\000\
\056\000\057\000\058\000\041\000\022\000\091\000\092\000\191\000\
\212\000\192\000\073\000\007\001\041\000\095\000\037\001\006\001\
\241\000\041\000\041\000\041\000\041\000\097\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\098\000\050\000\
\051\000\052\000\053\000\054\000\055\000\099\000\056\000\057\000\
\058\000\038\001\022\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\239\000\056\000\057\000\058\000\000\000\022\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\177\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\000\000\
\056\000\057\000\058\000\000\000\022\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\054\000\056\000\057\000\058\000\
\054\000\022\000\000\000\000\000\000\000\000\000\000\000\054\000\
\054\000\054\000\054\000\000\000\000\000\000\000\054\000\054\000\
\054\000\054\000\055\000\000\000\000\000\000\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\055\000\
\055\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\039\000\000\000\000\000\043\000\039\000\000\000\000\000\043\000\
\000\000\000\000\000\000\039\000\038\000\039\000\039\000\000\000\
\038\000\000\000\039\000\039\000\039\000\039\000\043\000\043\000\
\043\000\038\000\038\000\142\000\000\000\000\000\038\000\038\000\
\038\000\038\000\126\000\127\000\128\000\129\000\000\000\000\000\
\000\000\130\000\131\000\132\000\133\000"

let yycheck = "\019\000\
\000\000\110\000\021\000\021\000\135\000\024\000\024\000\016\001\
\001\000\217\000\217\000\001\001\097\000\004\001\001\001\012\001\
\013\001\014\001\015\001\007\001\001\001\004\001\019\001\020\001\
\005\001\035\001\016\001\017\001\001\001\016\001\017\001\040\001\
\005\001\023\001\024\001\120\000\023\001\024\001\019\001\020\001\
\021\001\022\001\173\000\001\001\054\001\055\001\254\000\254\000\
\021\001\007\001\069\000\069\000\137\000\138\000\139\000\140\000\
\141\000\009\001\009\001\061\001\012\001\012\001\050\001\051\001\
\052\001\001\001\045\001\019\001\019\001\048\001\002\001\004\001\
\016\001\017\001\053\001\008\001\009\001\010\001\011\001\023\001\
\024\001\190\000\167\000\016\001\001\001\018\001\005\001\220\000\
\005\001\174\000\223\000\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\090\000\
\061\001\012\001\013\001\014\001\015\001\012\001\013\001\009\001\
\019\001\020\001\012\001\022\001\001\001\050\001\051\001\052\001\
\005\001\012\001\013\001\014\001\015\001\168\000\168\000\012\001\
\013\001\014\001\015\001\016\001\017\001\002\001\019\001\020\001\
\021\001\022\001\001\001\126\000\127\000\128\000\129\000\130\000\
\131\000\132\000\133\000\005\001\005\001\024\001\007\001\194\000\
\194\000\197\000\198\000\023\001\024\001\001\001\016\001\017\001\
\039\001\005\001\041\001\042\001\036\001\023\001\024\001\012\001\
\013\001\004\001\015\001\001\001\043\001\044\001\217\000\005\001\
\020\001\021\001\022\001\222\000\222\000\002\001\012\001\013\001\
\014\001\015\001\016\001\017\001\006\001\019\001\020\001\021\001\
\022\001\023\001\024\001\004\001\002\001\012\001\013\001\014\001\
\015\001\049\001\246\000\247\000\019\001\005\001\249\000\249\000\
\251\000\251\000\056\001\254\000\004\001\004\001\013\001\005\001\
\001\001\001\001\007\001\002\001\005\001\001\001\009\001\004\001\
\006\001\012\001\003\001\012\001\013\001\014\001\015\001\016\001\
\017\001\005\001\019\001\020\001\021\001\022\001\023\001\024\001\
\004\001\004\001\030\001\005\001\004\001\004\001\004\001\004\001\
\001\001\001\001\001\001\007\001\001\001\005\001\001\001\005\001\
\004\001\025\001\026\001\027\001\012\001\013\001\014\001\015\001\
\016\001\017\001\004\001\019\001\020\001\021\001\022\001\001\001\
\005\001\005\001\041\001\005\001\004\001\004\001\004\001\005\001\
\006\001\007\001\012\001\013\001\014\001\015\001\004\001\001\001\
\005\001\019\001\020\001\021\001\022\001\004\001\062\001\063\001\
\064\001\065\001\066\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\005\001\057\001\058\001\059\001\005\001\061\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\005\001\004\001\006\001\005\001\005\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\001\001\057\001\058\001\
\059\001\005\001\061\001\006\001\007\001\005\001\005\001\005\001\
\012\001\013\001\014\001\015\001\005\001\007\001\024\001\019\001\
\020\001\021\001\022\001\007\001\001\001\001\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\006\001\057\001\058\001\
\059\001\005\001\061\001\006\001\005\001\005\001\001\001\005\001\
\007\001\005\001\007\001\005\001\124\000\013\000\007\001\089\000\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\001\001\
\057\001\058\001\059\001\005\001\061\001\008\001\009\001\173\000\
\197\000\174\000\069\000\251\000\014\001\016\001\033\001\250\000\
\219\000\019\001\020\001\021\001\022\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\034\001\061\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\217\000\057\001\058\001\059\001\255\255\061\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\255\255\
\057\001\058\001\059\001\255\255\061\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\050\001\051\001\
\052\001\053\001\054\001\055\001\001\001\057\001\058\001\059\001\
\005\001\061\001\255\255\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\255\255\255\255\255\255\019\001\020\001\
\021\001\022\001\001\001\255\255\255\255\255\255\005\001\255\255\
\255\255\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\019\001\020\001\021\001\022\001\
\001\001\255\255\255\255\001\001\005\001\255\255\255\255\005\001\
\255\255\255\255\255\255\012\001\001\001\014\001\015\001\255\255\
\005\001\255\255\019\001\020\001\021\001\022\001\020\001\021\001\
\022\001\014\001\015\001\005\001\255\255\255\255\019\001\020\001\
\021\001\022\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\019\001\020\001\021\001\022\001"

let yynames_const = "\
  Comma\000\
  Dot\000\
  Semicolumn\000\
  LeftParen\000\
  RightParen\000\
  LBrace\000\
  RBrace\000\
  True\000\
  False\000\
  ForAll\000\
  Exists\000\
  And\000\
  NegAnd\000\
  Or\000\
  NegOr\000\
  Equality\000\
  NegEquality\000\
  Negation\000\
  ImplicationLR\000\
  ImplicationRL\000\
  Equivalence\000\
  NegEquivalence\000\
  Plus\000\
  Minus\000\
  EOF\000\
  "

let yynames_block = "\
  CNF\000\
  FOF\000\
  Include\000\
  Axiom\000\
  Hypothesis\000\
  Conjecture\000\
  Negated_conjecture\000\
  Lemma\000\
  Theorem\000\
  Plain\000\
  Unknown\000\
  Derived\000\
  Equal\000\
  Inference\000\
  Theory\000\
  AC\000\
  File\000\
  Creator\000\
  Description\000\
  Iquote\000\
  Status\000\
  Thm\000\
  Sat\000\
  Refutation\000\
  PositiveInteger\000\
  FormulaItem\000\
  InferenceItem\000\
  GeneralFunction\000\
  InferenceInfo\000\
  DagSource\000\
  ExternalSource\000\
  UpperWord\000\
  LowerWord\000\
  DollarWord\000\
  DollarDollarWord\000\
  String\000\
  QuotedStr\000\
  CommentPercent\000\
  CommentEprover\000\
  CommentStar\000\
  AnnotationPercent\000\
  AnnotationStar\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Parser_types.parsing_type) in
    Obj.repr(
# 63 "src/parser_tptp.mly"
             (_1::_2)
# 619 "src/parser_tptp.ml"
               : Parser_types.parsing_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "src/parser_tptp.mly"
             ([])
# 625 "src/parser_tptp.ml"
               : Parser_types.parsing_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_formula) in
    Obj.repr(
# 69 "src/parser_tptp.mly"
                     (_1)
# 632 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'include_file) in
    Obj.repr(
# 70 "src/parser_tptp.mly"
                     (_1)
# 639 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 71 "src/parser_tptp.mly"
                     (_1)
# 646 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annotation) in
    Obj.repr(
# 72 "src/parser_tptp.mly"
                     (_1)
# 653 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'language) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formula_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    Obj.repr(
# 78 "src/parser_tptp.mly"
                                      (Formula(_1,_3,_5,_7,[]))
# 663 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'language) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formula_type) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'fol_formula) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'extra_annotations) in
    Obj.repr(
# 81 "src/parser_tptp.mly"
                                                        (Formula(_1,_3,_5,_7,[_8]))
# 674 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'source) in
    Obj.repr(
# 85 "src/parser_tptp.mly"
               (Source (_2))
# 681 "src/parser_tptp.ml"
               : 'extra_annotations))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'source) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'useful_info) in
    Obj.repr(
# 86 "src/parser_tptp.mly"
                                 (Source_UsefulInfo (_2,_4))
# 689 "src/parser_tptp.ml"
               : 'extra_annotations))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 91 "src/parser_tptp.mly"
      (CNF)
# 696 "src/parser_tptp.ml"
               : 'language))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "src/parser_tptp.mly"
     (raise FOF_format)
# 703 "src/parser_tptp.ml"
               : 'language))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'user_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'source_type) in
    Obj.repr(
# 100 "src/parser_tptp.mly"
                                 (UserSourceType(_1,_3))
# 711 "src/parser_tptp.ml"
               : 'formula_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'user_type) in
    Obj.repr(
# 101 "src/parser_tptp.mly"
               (UserType(_1))
# 718 "src/parser_tptp.ml"
               : 'formula_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'source_type) in
    Obj.repr(
# 102 "src/parser_tptp.mly"
                 (SourceType(_1))
# 725 "src/parser_tptp.ml"
               : 'formula_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "src/parser_tptp.mly"
          (Axiom)
# 732 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "src/parser_tptp.mly"
                             (Hypothesis)
# 739 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "src/parser_tptp.mly"
               (Conjecture)
# 746 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "src/parser_tptp.mly"
                                                (Negated_conjecture)
# 753 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "src/parser_tptp.mly"
          (Lemma)
# 760 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "src/parser_tptp.mly"
                          (Theorem)
# 767 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "src/parser_tptp.mly"
                                          (Plain)
# 774 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "src/parser_tptp.mly"
                                                          (Unknown)
# 781 "src/parser_tptp.ml"
               : 'user_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "src/parser_tptp.mly"
                       (Derived)
# 788 "src/parser_tptp.ml"
               : 'source_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_formula) in
    Obj.repr(
# 128 "src/parser_tptp.mly"
                   (_1)
# 795 "src/parser_tptp.ml"
               : 'fol_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binary_formula) in
    Obj.repr(
# 129 "src/parser_tptp.mly"
                   (_1)
# 802 "src/parser_tptp.ml"
               : 'fol_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_formula) in
    Obj.repr(
# 133 "src/parser_tptp.mly"
                  (_1)
# 809 "src/parser_tptp.ml"
               : 'literal_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_formula) in
    Obj.repr(
# 134 "src/parser_tptp.mly"
                  (_1)
# 816 "src/parser_tptp.ml"
               : 'literal_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'quantified_formula) in
    Obj.repr(
# 138 "src/parser_tptp.mly"
                     (_1)
# 823 "src/parser_tptp.ml"
               : 'atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bracketed_formula) in
    Obj.repr(
# 139 "src/parser_tptp.mly"
                    (_1)
# 830 "src/parser_tptp.ml"
               : 'atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 140 "src/parser_tptp.mly"
       (Atom _1)
# 837 "src/parser_tptp.ml"
               : 'atomic_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fol_formula) in
    Obj.repr(
# 143 "src/parser_tptp.mly"
                                                     (_2)
# 844 "src/parser_tptp.ml"
               : 'bracketed_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'quantifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'variables) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'literal_formula) in
    Obj.repr(
# 155 "src/parser_tptp.mly"
 (QuantifiedFormula(_1,_3,_6))
# 853 "src/parser_tptp.ml"
               : 'quantified_formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "src/parser_tptp.mly"
         (Exists)
# 859 "src/parser_tptp.ml"
               : 'quantifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "src/parser_tptp.mly"
         (ForAll)
# 865 "src/parser_tptp.ml"
               : 'quantifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 165 "src/parser_tptp.mly"
             ([_1])
# 872 "src/parser_tptp.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variables) in
    Obj.repr(
# 166 "src/parser_tptp.mly"
                             (_1::_3)
# 880 "src/parser_tptp.ml"
               : 'variables))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 193 "src/parser_tptp.mly"
                                         (BinaryFormula(And,_1,_3))
# 888 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 194 "src/parser_tptp.mly"
                                         (BinaryFormula(NegAnd,_1,_3))
# 896 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 195 "src/parser_tptp.mly"
                                         (BinaryFormula(Or,_1,_3))
# 904 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 196 "src/parser_tptp.mly"
                                         (BinaryFormula(NegOr,_1,_3))
# 912 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 197 "src/parser_tptp.mly"
                                         (BinaryFormula(ImplicationLR,_1,_3))
# 920 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 198 "src/parser_tptp.mly"
                                         (BinaryFormula(ImplicationRL,_1,_3))
# 928 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 199 "src/parser_tptp.mly"
                                         (BinaryFormula(Equivalence,_1,_3))
# 936 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fol_formula) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fol_formula) in
    Obj.repr(
# 200 "src/parser_tptp.mly"
                                         (BinaryFormula(NegEquivalence,_1,_3))
# 944 "src/parser_tptp.ml"
               : 'binary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'unary_connective) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_formula) in
    Obj.repr(
# 209 "src/parser_tptp.mly"
(UnaryFormula(_1,_2))
# 952 "src/parser_tptp.ml"
               : 'unary_formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "src/parser_tptp.mly"
                             (Negation)
# 958 "src/parser_tptp.ml"
               : 'unary_connective))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 228 "src/parser_tptp.mly"
            (_1)
# 965 "src/parser_tptp.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'theory_term) in
    Obj.repr(
# 233 "src/parser_tptp.mly"
               (TheoryTerm (_1))
# 972 "src/parser_tptp.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'user_term) in
    Obj.repr(
# 234 "src/parser_tptp.mly"
             (UserTerm (_1))
# 979 "src/parser_tptp.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 235 "src/parser_tptp.mly"
            (Var(_1))
# 986 "src/parser_tptp.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 239 "src/parser_tptp.mly"
        ([_1])
# 993 "src/parser_tptp.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 240 "src/parser_tptp.mly"
                       (_1::_3)
# 1001 "src/parser_tptp.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 244 "src/parser_tptp.mly"
                           (Equality(_1,_3))
# 1009 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 245 "src/parser_tptp.mly"
                           (NegEquality(_1,_3))
# 1017 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 246 "src/parser_tptp.mly"
                                                  (Equality(_3,_5))
# 1025 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 247 "src/parser_tptp.mly"
         (True)
# 1031 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "src/parser_tptp.mly"
          (False)
# 1037 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'number) in
    Obj.repr(
# 249 "src/parser_tptp.mly"
          (_1)
# 1044 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 250 "src/parser_tptp.mly"
                  (Plus(_1,_3))
# 1052 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 251 "src/parser_tptp.mly"
                   (Minus(_1,_3))
# 1060 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 252 "src/parser_tptp.mly"
                               (UnaryMinus(_2))
# 1067 "src/parser_tptp.ml"
               : 'theory_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 256 "src/parser_tptp.mly"
            (_1)
# 1074 "src/parser_tptp.ml"
               : 'user_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'functor_u) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 257 "src/parser_tptp.mly"
                                            (Fun(_1,_3))
# 1082 "src/parser_tptp.ml"
               : 'user_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_u) in
    Obj.repr(
# 261 "src/parser_tptp.mly"
             (Fun(_1,[]))
# 1089 "src/parser_tptp.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_word) in
    Obj.repr(
# 264 "src/parser_tptp.mly"
                (_1)
# 1096 "src/parser_tptp.ml"
               : 'functor_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lower_word) in
    Obj.repr(
# 267 "src/parser_tptp.mly"
              (_1)
# 1103 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dollar_word) in
    Obj.repr(
# 268 "src/parser_tptp.mly"
               (_1)
# 1110 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dollar_dollar_word) in
    Obj.repr(
# 269 "src/parser_tptp.mly"
                      (_1)
# 1117 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'single_quoted) in
    Obj.repr(
# 270 "src/parser_tptp.mly"
                 (_1)
# 1124 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'quoted_string) in
    Obj.repr(
# 273 "src/parser_tptp.mly"
                 (_1)
# 1131 "src/parser_tptp.ml"
               : 'single_quoted))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 288 "src/parser_tptp.mly"
                (_1)
# 1138 "src/parser_tptp.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 291 "src/parser_tptp.mly"
                   (PositiveInteger(int_of_string _1))
# 1145 "src/parser_tptp.ml"
               : 'number))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decimal_part) in
    Obj.repr(
# 293 "src/parser_tptp.mly"
     (RealNumber(int_of_string _1, int_of_string _2))
# 1153 "src/parser_tptp.ml"
               : 'number))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 295 "src/parser_tptp.mly"
                                    (_2)
# 1160 "src/parser_tptp.ml"
               : 'decimal_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_word) in
    Obj.repr(
# 297 "src/parser_tptp.mly"
                   (_1)
# 1167 "src/parser_tptp.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer_str) in
    Obj.repr(
# 298 "src/parser_tptp.mly"
                       (_1)
# 1174 "src/parser_tptp.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 301 "src/parser_tptp.mly"
                     (_1)
# 1181 "src/parser_tptp.ml"
               : 'unsigned_integer_str))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 308 "src/parser_tptp.mly"
                           (disquote_string _1)
# 1188 "src/parser_tptp.ml"
               : 'quoted_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 311 "src/parser_tptp.mly"
            (_1)
# 1195 "src/parser_tptp.ml"
               : 'lower_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'key_word) in
    Obj.repr(
# 312 "src/parser_tptp.mly"
            (_1)
# 1202 "src/parser_tptp.ml"
               : 'lower_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 317 "src/parser_tptp.mly"
             (_1)
# 1209 "src/parser_tptp.ml"
               : 'dollar_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 320 "src/parser_tptp.mly"
                   (_1)
# 1216 "src/parser_tptp.ml"
               : 'dollar_dollar_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 324 "src/parser_tptp.mly"
      (_1)
# 1223 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 324 "src/parser_tptp.mly"
                (_1)
# 1230 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 324 "src/parser_tptp.mly"
                              (_1)
# 1237 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 325 "src/parser_tptp.mly"
        (_1)
# 1244 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 325 "src/parser_tptp.mly"
                         (_1)
# 1251 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 325 "src/parser_tptp.mly"
                                          (_1)
# 1258 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 326 "src/parser_tptp.mly"
                     (_1)
# 1265 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 326 "src/parser_tptp.mly"
                                  (_1)
# 1272 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 326 "src/parser_tptp.mly"
                                                (_1)
# 1279 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 327 "src/parser_tptp.mly"
        (_1)
# 1286 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 327 "src/parser_tptp.mly"
                      (_1)
# 1293 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 327 "src/parser_tptp.mly"
                                     (_1)
# 1300 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 328 "src/parser_tptp.mly"
        (_1)
# 1307 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 328 "src/parser_tptp.mly"
                        (_1)
# 1314 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 328 "src/parser_tptp.mly"
                                     (_1)
# 1321 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 328 "src/parser_tptp.mly"
                                             (_1)
# 1328 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 328 "src/parser_tptp.mly"
                                                         (_1)
# 1335 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 329 "src/parser_tptp.mly"
          (_1)
# 1342 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 329 "src/parser_tptp.mly"
                            (_1)
# 1349 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 329 "src/parser_tptp.mly"
                                         (_1)
# 1356 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 330 "src/parser_tptp.mly"
         (_1)
# 1363 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 330 "src/parser_tptp.mly"
                   (_1)
# 1370 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 330 "src/parser_tptp.mly"
                             (_1)
# 1377 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 330 "src/parser_tptp.mly"
                                              (_1)
# 1384 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 331 "src/parser_tptp.mly"
              (_1)
# 1391 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 331 "src/parser_tptp.mly"
                                 (_1)
# 1398 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 331 "src/parser_tptp.mly"
                                                      (_1)
# 1405 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 332 "src/parser_tptp.mly"
                (_1)
# 1412 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 332 "src/parser_tptp.mly"
                                (_1)
# 1419 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 332 "src/parser_tptp.mly"
                                                     (_1)
# 1426 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'file_name) in
    Obj.repr(
# 339 "src/parser_tptp.mly"
  (Include(_3,[]))
# 1434 "src/parser_tptp.ml"
               : 'include_file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'file_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'formula_selection) in
    Obj.repr(
# 341 "src/parser_tptp.mly"
  (Include(_3,_4))
# 1443 "src/parser_tptp.ml"
               : 'include_file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 345 "src/parser_tptp.mly"
                           ([_1])
# 1450 "src/parser_tptp.ml"
               : 'formula_selection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formula_selection) in
    Obj.repr(
# 346 "src/parser_tptp.mly"
                           (_1::_2)
# 1458 "src/parser_tptp.ml"
               : 'formula_selection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'quoted_string) in
    Obj.repr(
# 349 "src/parser_tptp.mly"
                          (_1)
# 1465 "src/parser_tptp.ml"
               : 'file_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 356 "src/parser_tptp.mly"
                 (Comment (_1))
# 1472 "src/parser_tptp.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 357 "src/parser_tptp.mly"
                 (Comment (_1))
# 1479 "src/parser_tptp.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 358 "src/parser_tptp.mly"
                 (CommentEprover (_1))
# 1486 "src/parser_tptp.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 364 "src/parser_tptp.mly"
                    (Annotation (_1))
# 1493 "src/parser_tptp.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 365 "src/parser_tptp.mly"
                    (Annotation (_1))
# 1500 "src/parser_tptp.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'dag_source) in
    Obj.repr(
# 470 "src/parser_tptp.mly"
                                            (foo)
# 1508 "src/parser_tptp.ml"
               : 'source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'external_source) in
    Obj.repr(
# 471 "src/parser_tptp.mly"
                                                        (foo)
# 1516 "src/parser_tptp.ml"
               : 'source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 473 "src/parser_tptp.mly"
          (foo)
# 1523 "src/parser_tptp.ml"
               : 'source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 477 "src/parser_tptp.mly"
        (foo)
# 1530 "src/parser_tptp.ml"
               : 'dag_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inference_record) in
    Obj.repr(
# 478 "src/parser_tptp.mly"
                    (foo)
# 1537 "src/parser_tptp.ml"
               : 'dag_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'inference_rule) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'useful_info) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'parent_info) in
    Obj.repr(
# 484 "src/parser_tptp.mly"
  (foo)
# 1547 "src/parser_tptp.ml"
               : 'inference_record))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 487 "src/parser_tptp.mly"
                      (foo)
# 1554 "src/parser_tptp.ml"
               : 'inference_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parent_info_unit) in
    Obj.repr(
# 497 "src/parser_tptp.mly"
                   (foo)
# 1561 "src/parser_tptp.ml"
               : 'parent_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parent_info_unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parent_info) in
    Obj.repr(
# 498 "src/parser_tptp.mly"
                                      (foo)
# 1569 "src/parser_tptp.ml"
               : 'parent_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'source) in
    Obj.repr(
# 502 "src/parser_tptp.mly"
          (foo)
# 1576 "src/parser_tptp.ml"
               : 'parent_info_unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'source) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parent_details) in
    Obj.repr(
# 503 "src/parser_tptp.mly"
                         (foo)
# 1584 "src/parser_tptp.ml"
               : 'parent_info_unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'quoted_string) in
    Obj.repr(
# 506 "src/parser_tptp.mly"
                                      (foo)
# 1591 "src/parser_tptp.ml"
               : 'parent_details))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'theory_name) in
    Obj.repr(
# 511 "src/parser_tptp.mly"
 (foo)
# 1599 "src/parser_tptp.ml"
               : 'theory))
; (fun __caml_parser_env ->
    Obj.repr(
# 514 "src/parser_tptp.mly"
            (foo)
# 1605 "src/parser_tptp.ml"
               : 'theory_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 515 "src/parser_tptp.mly"
     (foo)
# 1612 "src/parser_tptp.ml"
               : 'theory_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'file_source) in
    Obj.repr(
# 521 "src/parser_tptp.mly"
                  (foo)
# 1619 "src/parser_tptp.ml"
               : 'external_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'creator_source) in
    Obj.repr(
# 522 "src/parser_tptp.mly"
                  (foo)
# 1626 "src/parser_tptp.ml"
               : 'external_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'theory) in
    Obj.repr(
# 523 "src/parser_tptp.mly"
                  (foo)
# 1633 "src/parser_tptp.ml"
               : 'external_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'file_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'file_node_name) in
    Obj.repr(
# 527 "src/parser_tptp.mly"
(foo)
# 1642 "src/parser_tptp.ml"
               : 'file_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 531 "src/parser_tptp.mly"
        (foo)
# 1649 "src/parser_tptp.ml"
               : 'file_node_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'creator_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'useful_info) in
    Obj.repr(
# 536 "src/parser_tptp.mly"
 (foo)
# 1658 "src/parser_tptp.ml"
               : 'creator_source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'quoted_string) in
    Obj.repr(
# 538 "src/parser_tptp.mly"
                              (foo)
# 1665 "src/parser_tptp.ml"
               : 'creator_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 546 "src/parser_tptp.mly"
                 (foo)
# 1671 "src/parser_tptp.ml"
               : 'useful_info))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'info_items) in
    Obj.repr(
# 547 "src/parser_tptp.mly"
                            (foo)
# 1678 "src/parser_tptp.ml"
               : 'useful_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'info_item) in
    Obj.repr(
# 551 "src/parser_tptp.mly"
             (foo)
# 1685 "src/parser_tptp.ml"
               : 'info_items))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'info_item) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'info_item) in
    Obj.repr(
# 552 "src/parser_tptp.mly"
                             (foo)
# 1693 "src/parser_tptp.ml"
               : 'info_items))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'formula_item) in
    Obj.repr(
# 570 "src/parser_tptp.mly"
                                                           (foo)
# 1701 "src/parser_tptp.ml"
               : 'info_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inference_item) in
    Obj.repr(
# 571 "src/parser_tptp.mly"
                                                           (foo)
# 1709 "src/parser_tptp.ml"
               : 'info_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'general_function) in
    Obj.repr(
# 572 "src/parser_tptp.mly"
                                                           (foo)
# 1717 "src/parser_tptp.ml"
               : 'info_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'description_item) in
    Obj.repr(
# 578 "src/parser_tptp.mly"
                   (foo)
# 1724 "src/parser_tptp.ml"
               : 'formula_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'iquote_item) in
    Obj.repr(
# 579 "src/parser_tptp.mly"
                  (foo)
# 1731 "src/parser_tptp.ml"
               : 'formula_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'quoted_string) in
    Obj.repr(
# 583 "src/parser_tptp.mly"
(foo)
# 1739 "src/parser_tptp.ml"
               : 'description_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'quoted_string) in
    Obj.repr(
# 586 "src/parser_tptp.mly"
 (foo)
# 1747 "src/parser_tptp.ml"
               : 'iquote_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inference_status) in
    Obj.repr(
# 592 "src/parser_tptp.mly"
                   (foo)
# 1754 "src/parser_tptp.ml"
               : 'inference_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'refutation) in
    Obj.repr(
# 593 "src/parser_tptp.mly"
              (foo)
# 1761 "src/parser_tptp.ml"
               : 'inference_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'status_value) in
    Obj.repr(
# 601 "src/parser_tptp.mly"
    (foo)
# 1769 "src/parser_tptp.ml"
               : 'inference_status))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'inference_info) in
    Obj.repr(
# 602 "src/parser_tptp.mly"
                                                   (foo)
# 1777 "src/parser_tptp.ml"
               : 'inference_status))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 606 "src/parser_tptp.mly"
      (foo)
# 1784 "src/parser_tptp.ml"
               : 'status_value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'inference_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'constant) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'general_list) in
    Obj.repr(
# 614 "src/parser_tptp.mly"
(foo)
# 1793 "src/parser_tptp.ml"
               : 'inference_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'file_source) in
    Obj.repr(
# 618 "src/parser_tptp.mly"
(foo)
# 1801 "src/parser_tptp.ml"
               : 'refutation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'general_function) in
    Obj.repr(
# 627 "src/parser_tptp.mly"
                   (foo)
# 1808 "src/parser_tptp.ml"
               : 'general_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'general_list) in
    Obj.repr(
# 630 "src/parser_tptp.mly"
               (foo)
# 1815 "src/parser_tptp.ml"
               : 'general_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 634 "src/parser_tptp.mly"
                 (foo)
# 1821 "src/parser_tptp.ml"
               : 'general_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'general_arguments) in
    Obj.repr(
# 635 "src/parser_tptp.mly"
                                   (foo)
# 1828 "src/parser_tptp.ml"
               : 'general_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 640 "src/parser_tptp.mly"
           (foo)
# 1835 "src/parser_tptp.ml"
               : 'general_function))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'functor_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'general_arguments) in
    Obj.repr(
# 641 "src/parser_tptp.mly"
                                                       (foo)
# 1843 "src/parser_tptp.ml"
               : 'general_function))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'general_term) in
    Obj.repr(
# 645 "src/parser_tptp.mly"
                                   (foo)
# 1850 "src/parser_tptp.ml"
               : 'general_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'general_term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'general_arguments) in
    Obj.repr(
# 646 "src/parser_tptp.mly"
                                   (foo)
# 1858 "src/parser_tptp.ml"
               : 'general_arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 651 "src/parser_tptp.mly"
                    (foo)
# 1865 "src/parser_tptp.ml"
               : 'functor_name))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parser_types.parsing_type)
